#pragma once

#include "menu_json_tools.h"
#include "../gfx/menus/ktMenu.h"

/// @brief Find selected menu item by index
/// @param current Head of current level
/// @param index Selected by user index
/// @return Pointer to entity and index (via index arg) of selected menu. If menu_entry_s is PARAM_RANGE, 
/// index identifyed min_value + step * index, so you can get autogenerated value
menu_entry_s* LocateChoosenMenu(menu_entry_s* current, uint32_t* index);

/// @brief Get upper entry on go back operation. If you going up on menu hierarhy, this can be used to preselect menu item
/// @param current Head of current level
/// @param index poiner to index, that used as return value
/// @return Pointer to head of upper menu entry, index get preselected id
menu_entry_s* LocateUpperSelectionMenu(menu_entry_s* current, uint32_t* index);

/// @brief Get name of entry upper folder, to show it in first row of menu
/// @param current Head of current level
/// @return pointer to null-terminated string
const char* GetMenuHeaderName(menu_entry_s* current);

/// @brief Used to fill and format MenuEntry structure using data in entity argument
/// @param entity Pointer to current entity. MenuEntry is filled based on data in entity
/// @param curr_element Pointer to current MenuEntry entry
void PopulateMenuEntry(menu_entry_s* entity, MenuEntry* curr_element);

/// @brief Creating MenuEntry, that ready to show via newMenuKT() fucn. First row is used to place upper menu name
/// @param current Head of current level
/// @param menu_elements Pointer to variable, that indicate how many elements in MenuEntry, used as return argument
/// @param reset_presented Pointer to variable-flag, that indicates presistance of reset menu item in the end of 
/// MenuEntry list, used as return argument
/// @return Pointer to MenuEntry array, that contains ready-to-use elements. Use according to values in menu_elements and reset_presented
MenuEntry* CreateMenuEntity(menu_entry_s* current, uint32_t* menu_elements, uint32_t* reset_presented);

/// @brief Deleting all MenuEntry data safely 
/// @param menu_header Pointer to head of MenuEntry
/// @param count size of MenuEntry array
/// @param nav_temp head of current level
void DeleteMenuEntry(MenuEntry* menu_header, uint32_t count, menu_entry_s* nav_temp);

/// @brief Get selected value of VALUE_ENTRY
/// @param current head of current level
/// @param selected selected option, 0 for MANUAL or value for RANGE_SELECTION
/// @return value of selected VALUE_ENTRY
int64_t GetSelectedParameterValue(menu_entry_s* current, int selected);

/// @brief Used to preselect MenuEntry, when going down on menu_entry_s structure
/// @param current Selected menu_entry_s
/// @return Preselected position of MenuEntry element
uint32_t LocateChoosenInnerMenuParam(menu_entry_s* current);